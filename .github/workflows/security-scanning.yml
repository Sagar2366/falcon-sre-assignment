name: Security Scanning & Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Secret Scanning
  secret-scanning:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        args: --only-verified --fail
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run GitGuardian
      uses: GitGuardian/ggshield-action@v1
      with:
        mode: scan
        exit-zero: false

  # Terraform Security Scanning
  terraform-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: terraform/
        format: sarif
        out: tfsec.sarif
    
    - name: Upload tfsec SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: tfsec.sarif
    
    - name: Run Checkov
      run: |
        pip install checkov
        checkov -d terraform/ --output sarif --output-file-path checkov.sarif
        checkov -d terraform/ --output cli
    
    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov.sarif

  # Kubernetes Security Scanning
  kubernetes-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run kube-linter
      uses: stackrox/kube-linter-action@v0.2.0
      with:
        args: lint kubernetes/
    
    - name: Run kubesec
      run: |
        wget -q -O kubesec https://github.com/controlplaneio/kubesec/releases/download/v2.11.0/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        chmod +x kubesec
        find kubernetes/ -name "*.yaml" -exec ./kubesec scan {} \;
    
    - name: Run Trivy for Kubernetes
      uses: aquasecurity/trivy-action@v0.18.0
      with:
        scan-type: 'config'
        scan-ref: 'kubernetes/'
        format: 'sarif'
        output: 'trivy-k8s.sarif'
    
    - name: Upload Trivy K8s SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-k8s.sarif

  # Docker Security Scanning
  docker-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t sample-app .
    
    - name: Run Trivy for Docker
      uses: aquasecurity/trivy-action@v0.18.0
      with:
        image-ref: 'sample-app:latest'
        format: 'sarif'
        output: 'trivy-docker.sarif'
    
    - name: Upload Trivy Docker SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-docker.sarif
    
    - name: Run Docker Scout
      uses: docker/scout-action@v1
      with:
        command: cves
        image: sample-app:latest
        only-severities: critical,high
        exit-code: 1

  # Code Quality & SonarQube
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # YAML Linting
  yaml-linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run yamllint
      run: |
        pip install yamllint
        yamllint kubernetes/ terraform/
    
    - name: Run yamlfmt
      run: |
        go install github.com/google/yamlfmt/cmd/yamlfmt@latest
        yamlfmt -w kubernetes/ terraform/

  # Terraform Linting
  terraform-linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Format Check
      run: |
        cd terraform/
        terraform fmt -check -recursive
        terraform validate
    
    - name: Run tflint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.44.1
    
    - name: Run tflint
      run: |
        cd terraform/
        tflint --init
        tflint

  # Dependency Scanning
  dependency-scanning:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy for dependencies
      uses: aquasecurity/trivy-action@v0.18.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs.sarif'
    
    - name: Upload Trivy FS SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-fs.sarif

  # Security Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [secret-scanning, terraform-security, kubernetes-security, docker-security, code-quality]
    if: always()
    steps:
    - name: Security Scan Summary
      run: |
        echo "Security Scanning Complete"
        echo "Secret scanning completed"
        echo "Terraform security scanning completed"
        echo "Kubernetes security scanning completed"
        echo "Docker security scanning completed"
        echo "Code quality analysis completed"
        echo ""
        echo "Check the Security tab for detailed results"
        echo "Any critical issues will block the PR" 